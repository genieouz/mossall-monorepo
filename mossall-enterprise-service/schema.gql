# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PaginationInfo {
  totalItems: Int!
  pageCount: Int!
  currentPage: Int!
  pageSize: Int!
}

type Organization {
  id: ID!

  """Nom de l'organisation"""
  name: String!

  """Email de l'utilisateur racine ou admin"""
  rootEmail: String!
  maxDemandeAmount: Float!
  amountPercent: Float!
  fees: Float!
  demandeDeadlineDay: Float
}

type User {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: String!
  email: String!
  firstName: String!
  lastName: String!
  organization: Organization!
  phoneNumber: String
  address: String
  position: String
  uniqueIdentifier: String
  salary: Float
  balance: Float
  wizallAccountNumber: String
  bankAccountNumber: String
  totalDemandeAmount: Float!
  role: String
  blocked: Boolean
  birthDate: DateTime
  favoriteWallet: Wallet
  enableEmailNotification: Boolean
  status: Float
  authorizedAdvance: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Possible wallets"""
enum Wallet {
  WAVE
}

type PaginatedUserResult {
  pagination: PaginationInfo!
  results: [User!]!
}

type Session {
  """Null if user must reset his password"""
  access_token: String

  """Null if user must reset his password"""
  expires_in: Float

  """Null if user must reset his password"""
  refresh_expires_in: Float

  """Null if user must reset his password"""
  refresh_token: String

  """Null if user must reset his password"""
  token_type: String

  """Null if user must reset his password"""
  session_state: String

  """Null if user must reset his password"""
  scope: String

  """Null if user must reset his password"""
  user: User

  """Not null if user must reset his password. Null other cases"""
  token: String

  """False if user must reset his password"""
  enabled: Boolean!
}

type Notification {
  createdAt: DateTime!
  updatedAt: DateTime!
  entityId: String
  title: String!
  content: String!
  author: User!
  organization: String!
  viewedByMe: Boolean!
}

type Payment {
  id: ID!
}

type Demande {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  amount: Float!
  number: Float!
  fees: Float!
  status: DemandeStatus!
  colloborator: User
  rejectedReason: String
  collaborator: User!
  statusText: String
}

enum DemandeStatus {
  VALIDATED
  PAYED
  REJECTED
  PENDING
  IN_PROCESS
  CANCELLED
}

type PaginatedDemandeResult {
  pagination: PaginationInfo!
  results: [Demande!]!
}

type DemandesMetricsRow {
  date: String!
  amount: Float!
  month: Float!
  year: Float!
}

type DemandesMetrics {
  payed: [DemandesMetricsRow!]!
  total: [DemandesMetricsRow!]!
  remaining: [DemandesMetricsRow!]!
}

type SupportPaiement {
  amount: Float!
  owner: String!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  email: String!
  uniqueIdentifier: String!
}

type Activity {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  message: String!
  initialValue: Any
  currentValue: Any
  meta: Any
  user: User!
  scope: ActivityScope!
  organization: Organization!
}

"""Possible activities"""
enum ActivityScope {
  demande
  authentification
  collaborateur
  organisation
}

type PaginatedActivityResult {
  pagination: PaginationInfo!
  results: [Activity!]!
}

"""Any type"""
scalar Any

type Query {
  fetchCurrentAdmin: User!
  phoneNumberExists(phoneNumber: String!, userId: String, isAdmin: Boolean): Boolean!
  uniqueIdentifierExists(uniqueIdentifier: String!, userId: String, isAdmin: Boolean): Boolean!
  bankAccountNumberExists(bankAccountNumber: String!, userId: String, isAdmin: Boolean): Boolean!
  emailExists(email: String!, userId: String, isAdmin: Boolean): Boolean!
  loginAdmin(loginInput: LoginInput!): Session!
  fetchOrganizations: [Organization!]!
  fetchOrganization(organizationId: ID!): Organization!
  fetchOrganizationCollaborators(metricsInput: DemandesMetricsInput): [User!]!
  fetchPaginatedOrganizationCollaborators(metricsInput: DemandesMetricsInput, queryFilter: QueryDataConfigInput): PaginatedUserResult!
  fetchOrganizationAdmins: [User!]!
  fetchOrganizationDemandes(metricsInput: DemandesMetricsInput): [Demande!]!
  fetchPaginatedOrganizationDemandes(metricsInput: DemandesMetricsInput, queryFilter: QueryDataConfigInput): PaginatedDemandeResult!
  fetchDemandesMetrics(metricsInput: DemandesMetricsInput!): DemandesMetrics!
  fetchSupportPaiement: [SupportPaiement!]!
  fetchOrganizationNotifications: [Notification!]!
  fetchPayments: [Payment!]!
  fetchPayment(paymentId: ID!): Payment!
  fetchOrganizationCollaborator(collaboratorId: String!): User!
  fetchPaginatedActivities(queryFilter: QueryDataConfigInput): PaginatedActivityResult!
  fetchActivity(activityId: ID!): Activity!
}

input LoginInput {
  email: String!
  password: String!
}

input DemandesMetricsInput {
  startDate: DateTime = "2023-01-01T00:00:00.000Z"
  endDate: DateTime = "2030-12-31T00:00:00.000Z"
  minimum: Float
  maximum: Float
  status: DemandeStatus
}

input QueryDataConfigInput {
  limit: Int
  page: Int
  orderBy: OrderByInput
  search: String
}

input OrderByInput {
  property: String!
  direction: OrderByDirection!
}

"""Sort order"""
enum OrderByDirection {
  ASC
  DESC
}

type Mutation {
  updateMyAdminPassword(oldPassword: String!, newPassword: String!): Boolean!
  lockUser(userId: String!): Boolean!
  unlockUser(userId: String!): Boolean!
  enableEmailNotification(userId: String!): Boolean!
  disableEmailNotification(userId: String!): Boolean!
  updateMyAdminProfile(userInput: UpdateMyAdminProfileInput!): Boolean!
  upladFile(file: String!, destination: String!): Boolean!
  resetAdminPassword(resetPasswordInput: ResetPasswordInput!): Boolean!
  startForgotPassword(email: String!): Boolean!
  finalizeForgotPassword(finalizeForgotPasswordInput: FinalizeForgotPasswordInput!): Boolean!
  createOrganization(organizationInput: OrganizationInput!): Organization!
  createFinancialOrganization(organizationInput: OrganizationInput!): Organization!
  updateOrganization(organizationInput: OrganizationUpdateInput!, organizationId: ID!): Boolean!
  cancelDemandeByAdmin(demandeId: ID!): Boolean!
  rejectDemandeByAdmin(demandeId: ID!, rejectedReason: String!): Boolean!
  validateDemande(demandeId: ID!): Boolean!
  payeDemande(demandeId: ID!): Boolean!
  viewOrganizationNotifications: Boolean!
  inviteCollaborator(collaborator: InviteCollaboratorInput!): Boolean!
  inviteAdmin(admin: InviteCollaboratorInput!): Boolean!
  updateCollaborator(collaborator: UpdateCollaboratorInput!, collaboratorId: String!): Boolean!
}

input UpdateMyAdminProfileInput {
  firstName: String!
  lastName: String!
  phoneNumber: String!
  address: String!
  birthDate: DateTime
  favoriteWallet: Wallet
  enableEmailNotification: Boolean
}

input ResetPasswordInput {
  token: String!
  password: String!
}

input FinalizeForgotPasswordInput {
  token: String!
  password: String!
  code: String!
}

input OrganizationInput {
  """Nom de l'organisation"""
  name: String!

  """Email de l'utilisateur racine ou admin"""
  rootEmail: String!

  """Pr√©nom de l'utilisateur racine"""
  rootFirstname: String!

  """Nom de l'utilisateur racine"""
  rootLastname: String!
  maxDemandeAmount: Float!
  amountPercent: Float!
  fees: Float!
}

input OrganizationUpdateInput {
  """Nom de l'organisation"""
  name: String
  maxDemandeAmount: Float
  amountPercent: Float
  fees: Float
  demandeDeadlineDay: Float
}

input InviteCollaboratorInput {
  email: String!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  address: String!
  position: String!
  uniqueIdentifier: String!
  salary: Float
  wizallAccountNumber: String
  bankAccountNumber: String
  birthDate: DateTime
  favoriteWallet: Wallet
}

input UpdateCollaboratorInput {
  firstName: String!
  lastName: String!
  phoneNumber: String!
  address: String!
  position: String!
  uniqueIdentifier: String!
  salary: Float
  wizallAccountNumber: String
  bankAccountNumber: String
  birthDate: DateTime
  favoriteWallet: Wallet
}