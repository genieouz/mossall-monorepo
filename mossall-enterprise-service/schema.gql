# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PaginationInfo {
  totalItems: Int!
  pageCount: Int!
  currentPage: Int!
  pageSize: Int!
}

type Organization {
  id: ID!

  """Nom de l'organisation"""
  name: String!

  """Email de l'utilisateur racine ou admin"""
  rootEmail: String!
  maxDemandeAmount: Float!
  amountPercent: Float!
  fees: Float!
  demandeDeadlineDay: Float
  organisationService: [OrganisationService!]
}

type User {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: String!
  email: String!
  firstName: String!
  lastName: String!
  organization: Organization!
  phoneNumber: String
  address: String
  position: String
  uniqueIdentifier: String
  salary: Float
  balance: Float
  wizallAccountNumber: String
  bankAccountNumber: String
  totalDemandeAmount: Float!
  role: String
  blocked: Boolean
  birthDate: DateTime
  favoriteWallet: Wallet
  enableEmailNotification: Boolean
  status: Float
  authorizedAdvance: Float!
  categorySociopro: CategorySociopro
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Possible wallets"""
enum Wallet {
  WAVE
}

type PaginatedUserResult {
  pagination: PaginationInfo!
  results: [User!]!
}

type Session {
  """Null if user must reset his password"""
  access_token: String

  """Null if user must reset his password"""
  expires_in: Float

  """Null if user must reset his password"""
  refresh_expires_in: Float

  """Null if user must reset his password"""
  refresh_token: String

  """Null if user must reset his password"""
  token_type: String

  """Null if user must reset his password"""
  session_state: String

  """Null if user must reset his password"""
  scope: String

  """Null if user must reset his password"""
  user: User

  """Not null if user must reset his password. Null other cases"""
  token: String

  """False if user must reset his password"""
  enabled: Boolean!
}

type CategorySociopro {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Any!
  title: String
  description: String
  activated: Boolean
  organizationId: String
  addedBy: String
  organisation: Organization!
}

type PaginatedCategorySocioproResult {
  pagination: PaginationInfo!
  results: [CategorySociopro!]!
}

type OrganisationService {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Any!
  amount: Int
  amountUnit: AmountUnit!
  refundDuration: Int!
  refundDurationUnit: DurationUnit!
  activated: Boolean!
  activatedAt: DateTime
  activationDurationDay: Int!
  autoValidate: Boolean!
  organizationId: String!
  serviceId: String!
  organization: Organization!
  service: Service!
  events: [Event!]
  categoriesocioproservices: [CategorySocioproService!]
  demandes: [Demande!]
}

enum AmountUnit {
  Fixed
  Percentage
}

enum DurationUnit {
  Day
  Month
}

type PaginatedOrganisationServiceResult {
  pagination: PaginationInfo!
  results: [OrganisationService!]!
}

type Event {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Any!
  title: String!
  description: String
  startDate: DateTime!
  endDate: DateTime!
  amount: Int!
  amountUnit: AmountUnit!
  refundDuration: Int!
  refundDurationUnit: DurationUnit!
  activated: Boolean!
  activatedAt: DateTime
  autoValidate: Boolean!
  addedBy: String
  organisationService: OrganisationService!
  categorySocioproServices: [CategorySocioproService!]
}

type PaginatedEventResult {
  pagination: PaginationInfo!
  results: [Event!]!
}

type Service {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Any!
  title: String!
  description: String
  identifier: String!
  refundDurationMonth: Int!
  available: Boolean!
  publishedAt: DateTime
  addedBy: String
}

type PaginatedServiceResult {
  pagination: PaginationInfo!
  results: [Service!]!
}

type Demande {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  amount: Float!
  number: Float!
  fees: Float!
  status: DemandeStatus!
  colloborator: User
  rejectedReason: String
  refundDuration: Float!
  remainingRefundAmount: Float
  collaborator: User!
  statusText: String
  organisationService: OrganisationService
  remboursements: [Remboursement!]
}

enum DemandeStatus {
  VALIDATED
  PAYED
  REJECTED
  PENDING
  IN_PROCESS
  CANCELLED
}

type PaginatedDemandeResult {
  pagination: PaginationInfo!
  results: [Demande!]!
}

type CountStatusDemande {
  pending: Float!
  rejected: Float!
  validated: Float!
  payed: Float!
  cancelled: Float!
}

type CategorySocioproService {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Any!
  amount: Int!
  amountUnit: AmountUnit!
  refundDuration: Int!
  refundDurationUnit: DurationUnit!
  activated: Boolean!
  activatedAt: DateTime
  autoValidate: Boolean!
  organisationServiceId: String!
  categorySocioproId: String!
  eventId: String
  categorySociopro: CategorySociopro
  organisationService: OrganisationService
  event: Event
}

type PaginatedCategorySocioproServiceResult {
  pagination: PaginationInfo!
  results: [CategorySocioproService!]!
}

type Notification {
  createdAt: DateTime!
  updatedAt: DateTime!
  entityId: String
  title: String!
  content: String!
  author: User!
  organization: String!
  viewedByMe: Boolean!
}

type PaginatedNotificationResult {
  pagination: PaginationInfo!
  results: [Notification!]!
}

type Payment {
  id: ID!
}

type Remboursement {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  amount: Float!
  number: Float!
  fees: Float
  status: RemboursementStatus!
  demandeId: String!
  userId: String
  validatedAt: DateTime
  demande: Demande
  user: User
  validatedBy: User
}

enum RemboursementStatus {
  PAYED
  PENDING
}

type DemandesMetricsRow {
  date: String!
  amount: Float!
  month: Float!
  year: Float!
}

type DemandesMetrics {
  payed: [DemandesMetricsRow!]!
  total: [DemandesMetricsRow!]!
  remaining: [DemandesMetricsRow!]!
}

type Activity {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  message: String!
  initialValue: Any
  currentValue: Any
  meta: Any
  user: User!
  scope: ActivityScope!
  organization: Organization!
}

"""Possible activities"""
enum ActivityScope {
  demande
  authentification
  collaborateur
  organisation
}

type PaginatedActivityResult {
  pagination: PaginationInfo!
  results: [Activity!]!
}

"""Any type"""
scalar Any

type Query {
  fetchCurrentAdmin: User!
  phoneNumberExists(phoneNumber: String!, userId: String, isAdmin: Boolean): Boolean!
  uniqueIdentifierExists(uniqueIdentifier: String!, userId: String, isAdmin: Boolean): Boolean!
  bankAccountNumberExists(bankAccountNumber: String!, userId: String, isAdmin: Boolean): Boolean!
  emailExists(email: String!, userId: String, isAdmin: Boolean): Boolean!
  fetchCollaboratorCount(filter: UserFilterInput): Float!
  loginAdmin(loginInput: LoginInput!): Session!
  fetchOrganizations: [Organization!]!
  fetchOrganization(organizationId: ID!): Organization!
  fetchOrganizationCollaborators(metricsInput: DemandesMetricsInput): [User!]!
  fetchPaginatedOrganisationCol(metricsInput: DemandesMetricsInput): PaginatedUserResult!
  fetchPaginatedOrganizationCollaborators(metricsInput: DemandesMetricsInput, queryFilter: QueryDataConfigInput, hasPendingDemandes: Boolean): PaginatedUserResult!
  fetchOrganizationAdmins: [User!]!
  fetchPaginatedOrganisationAdmins(metricsInput: DemandesMetricsInput, queryFilter: QueryDataConfigInput): PaginatedUserResult!
  fetchOrganizationDemandes(metricsInput: DemandesMetricsInput): [Demande!]!
  fetchPaginatedOrganizationDemandes(metricsInput: DemandesMetricsInput, queryFilter: QueryDataConfigInput, organizationServiceId: String): PaginatedDemandeResult!
  fetchDemandesByCollaborator(collaboratorId: ID!, status: DemandeStatus): [Demande!]!
  fetchDemandesMetrics(metricsInput: DemandesMetricsInput!): DemandesMetrics!
  fetchSupportPaiement: [Demande!]!
  fetchCountStatus(filter: DemandesMetricsInput): CountStatusDemande!
  fetchTotalDemandesAmount(status: DemandeStatus, filter: DemandesMetricsInput): Float
  fetchCategorySociopros(queryConfig: QueryDataConfigInput): PaginatedCategorySocioproResult!
  fetchAllCategorySociopros(queryConfig: QueryDataConfigInput): [CategorySociopro!]!
  fetchCategorySociopro(categorySocioproId: ID!): CategorySociopro!
  fetchOrganizationCollaborator(collaboratorId: String!): User!
  fetchOrganisationServices(queryConfig: QueryDataConfigInput): PaginatedOrganisationServiceResult!
  fetchAllOrganisationServices(queryConfig: QueryDataConfigInput): [OrganisationService!]!
  fetchOrganisationService(organisationServiceId: ID!): OrganisationService!
  fetchOrganisationServiceByOrganisationIdAndServiceId(organisationId: ID!, serviceId: ID!): OrganisationService
  fetchEvents(queryConfig: QueryDataConfigInput, organizationServiceId: ID!): PaginatedEventResult!
  fetchAllEvents(queryConfig: QueryDataConfigInput, organizationServiceId: ID!): [Event!]!
  fetchEvent(eventId: ID!): Event!
  fetchServices(queryConfig: QueryDataConfigInput): PaginatedServiceResult!
  fetchAllServices(queryConfig: QueryDataConfigInput): [Service!]!
  fetchService(serviceId: ID!): Service!
  fetchServicesPub(queryConfig: QueryDataConfigInput): PaginatedServiceResult!
  fetchServicePub(serviceId: String!): Service!
  fetchCategorySocioproServices(queryConfig: QueryDataConfigInput): PaginatedCategorySocioproServiceResult!
  fetchAllCategorySocioproServices(queryConfig: QueryDataConfigInput, organisationServiceId: ID!): [CategorySocioproService!]!
  fetchCategorySocioproService(categorySocioproServiceId: ID!): CategorySocioproService!
  fetchOrganizationNotifications: [Notification!]!
  fetchPaginatedNotifications(queryFilter: QueryDataConfigInput, metricsInput: DemandesMetricsInput): PaginatedNotificationResult!
  fetchPayments: [Payment!]!
  fetchPayment(paymentId: ID!): Payment!
  myRemboursements: [Remboursement!]!
  fetchRemboursementByUserId(userId: ID!): [Remboursement!]!
  fetchAllRemboursements: [Remboursement!]!
  fetchRemboursementsByDemande(demandeId: ID!): [Remboursement!]!
  fetchPaginatedActivities(queryFilter: QueryDataConfigInput): PaginatedActivityResult!
  fetchActivity(activityId: ID!): Activity!
}

input UserFilterInput {
  startDate: String
  endDate: String
  role: UserRole
}

"""Possible user role"""
enum UserRole {
  ADMIN
  SUPER_ADMIN
  SUPER_ADMIN_ORG
  COLLABORATOR
}

input LoginInput {
  email: String!
  password: String!
}

input DemandesMetricsInput {
  startDate: DateTime = "2023-01-01T00:00:00.000Z"
  endDate: DateTime = "2030-12-31T00:00:00.000Z"
  minimum: Float
  maximum: Float
  status: DemandeStatus
}

input QueryDataConfigInput {
  limit: Int
  page: Int
  orderBy: OrderByInput
  search: String
}

input OrderByInput {
  property: String!
  direction: OrderByDirection!
}

"""Sort order"""
enum OrderByDirection {
  ASC
  DESC
}

type Mutation {
  updateMyAdminPassword(oldPassword: String!, newPassword: String!): Boolean!
  lockUser(userId: String!): Boolean!
  unlockUser(userId: String!): Boolean!
  enableEmailNotification(userId: String!): Boolean!
  disableEmailNotification(userId: String!): Boolean!
  updateMyAdminProfile(userInput: UpdateMyAdminProfileInput!): Boolean!
  upladFile(file: String!, destination: String!): Boolean!
  resetAdminPassword(resetPasswordInput: ResetPasswordInput!): Boolean!
  startForgotPassword(email: String!): Boolean!
  finalizeForgotPassword(finalizeForgotPasswordInput: FinalizeForgotPasswordInput!): Boolean!
  createOrganization(organizationInput: OrganizationInput!): Organization!
  createFinancialOrganization(organizationInput: OrganizationInput!): Organization!
  updateOrganization(organizationInput: OrganizationUpdateInput!, organizationId: ID!): Boolean!
  cancelDemandeByAdmin(demandeId: ID!): Boolean!
  rejectDemandeByAdmin(demandeId: ID!, rejectedReason: String!): Boolean!
  validateDemande(demandeId: ID!): Boolean!
  payeDemande(demandeId: ID!): Boolean!
  createCategorySociopro(categorySocioproInput: CategorySocioproInput!, organizationId: ID!): CategorySociopro!
  updateCategorySociopro(categorySocioproInput: CategorySocioproUpdateInput!, categorySocioproId: ID!): Boolean!
  deleteCategorySociopro(categorySocioproId: ID!): Boolean!
  activateCategorySociopro(categorySocioproId: ID!, activatedAt: DateTime): Boolean!
  deactivateCategorySociopro(categorySocioproId: ID!): Boolean!
  inviteCollaborator(collaborator: InviteCollaboratorInput!, categorySocioProId: String): Boolean!
  inviteAdmin(admin: InviteCollaboratorInput!): Boolean!
  updateCollaborator(collaborator: UpdateCollaboratorInput!, collaboratorId: String!, categorySocioProId: String): Boolean!
  createOrganisationService(organisationServiceInput: OrganisationServiceInput!, organisationId: ID!, serviceId: ID!): OrganisationService!
  updateOrganisationService(organisationServiceInput: OrganisationServiceUpdateInput!, organisationServiceId: ID!): Boolean!
  deleteOrganisationService(organisationServiceId: ID!): Boolean!
  activateOrganisationService(organisationServiceId: ID!): Boolean!
  deactivateOrganisationService(organisationServiceId: ID!): Boolean!
  createEvent(eventInput: EventInput!, organizationServiceId: ID!): Event!
  updateEvent(eventInput: EventUpdateInput!, eventId: ID!): Boolean!
  deleteEvent(eventId: ID!): Boolean!
  activateEvent(eventId: ID!): Boolean!
  deactivateEvent(eventId: ID!): Boolean!
  createService(serviceInput: ServiceInput!): Service!
  updateService(serviceInput: ServiceUpdateInput!, serviceId: ID!): Boolean!
  deleteService(serviceId: ID!): Boolean!
  activateService(serviceId: ID!): Boolean!
  deactivateService(serviceId: ID!): Boolean!
  createCategorySocioproService(categorySocioproServiceInput: CategorySocioproServiceInput!, categorySocioproId: ID!, organisationServiceId: ID!, eventId: ID): CategorySocioproService!
  updateCategorySocioproService(categorySocioproServiceInput: CategorySocioproServiceUpdateInput!, categorySocioproServiceId: ID!): Boolean!
  deleteCategorySocioproService(categorySocioproServiceId: ID!): Boolean!
  activateCategorySocioproService(categorySocioproServiceId: ID!): Boolean!
  deactivateCategorySocioproService(categorySocioproServiceId: ID!): Boolean!
  viewOrganizationNotifications: Boolean!
  validateRemboursement(remboursementId: ID!): Boolean!
}

input UpdateMyAdminProfileInput {
  firstName: String!
  lastName: String!
  phoneNumber: String!
  address: String
  birthDate: DateTime
  favoriteWallet: Wallet
  enableEmailNotification: Boolean
}

input ResetPasswordInput {
  token: String!
  password: String!
}

input FinalizeForgotPasswordInput {
  token: String!
  password: String!
  code: String!
}

input OrganizationInput {
  """Nom de l'organisation"""
  name: String!

  """Email de l'utilisateur racine ou admin"""
  rootEmail: String!

  """Prénom de l'utilisateur racine"""
  rootFirstname: String!

  """Nom de l'utilisateur racine"""
  rootLastname: String!
  maxDemandeAmount: Float!
  amountPercent: Float!
  fees: Float!
}

input OrganizationUpdateInput {
  """Nom de l'organisation"""
  name: String
  maxDemandeAmount: Float
  amountPercent: Float
  fees: Float
  demandeDeadlineDay: Float
}

input CategorySocioproInput {
  title: String!
  description: String
  activated: Boolean
}

input CategorySocioproUpdateInput {
  title: String
  description: String
  activated: Boolean
  activatedAt: DateTime
}

input InviteCollaboratorInput {
  email: String!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  address: String!
  position: String!
  uniqueIdentifier: String!
  salary: Float
  wizallAccountNumber: String
  bankAccountNumber: String
  birthDate: DateTime
  favoriteWallet: Wallet
}

input UpdateCollaboratorInput {
  firstName: String!
  lastName: String!
  phoneNumber: String!
  address: String!
  position: String!
  uniqueIdentifier: String!
  salary: Float
  wizallAccountNumber: String
  bankAccountNumber: String
  birthDate: DateTime
  favoriteWallet: Wallet
}

input OrganisationServiceInput {
  amount: Int
  amountUnit: AmountUnit
  refundDuration: Int
  refundDurationUnit: DurationUnit
  activated: Boolean
  activatedAt: DateTime
  activationDurationDay: Int
  autoValidate: Boolean
}

input OrganisationServiceUpdateInput {
  amount: Int
  amountUnit: AmountUnit
  refundDuration: Int
  refundDurationUnit: DurationUnit
  activated: Boolean
  activatedAt: DateTime
  activationDurationDay: Int
  autoValidate: Boolean
}

input EventInput {
  title: String!
  description: String
  startDate: DateTime!
  endDate: DateTime!
  activated: Boolean
  amount: Int
  amountUnit: AmountUnit
  refundDuration: Int!
  refundDurationUnit: DurationUnit
  activatedAt: DateTime
  autoValidate: Boolean
}

input EventUpdateInput {
  title: String
  description: String
  startDate: DateTime
  endDate: DateTime
  amount: Int
  amountUnit: AmountUnit
  refundDuration: Int
  refundDurationUnit: DurationUnit
  activated: Boolean
  activatedAt: DateTime
  autoValidate: Boolean
}

input ServiceInput {
  title: String!
  description: String
  identifier: String!
  refundDurationMonth: Int!
  available: Boolean!
}

input ServiceUpdateInput {
  title: String
  description: String
  identifier: String
  available: Boolean
  refundDurationMonth: Float
}

input CategorySocioproServiceInput {
  amount: Int
  amountUnit: AmountUnit
  refundDuration: Int!
  refundDurationUnit: DurationUnit
  activated: Boolean!
  activatedAt: DateTime
  autoValidate: Boolean
}

input CategorySocioproServiceUpdateInput {
  amount: Int
  amountUnit: AmountUnit
  refundDuration: Int
  refundDurationUnit: DurationUnit
  activated: Boolean
  activatedAt: DateTime
  autoValidate: Boolean
}